package components

import (
    "heroPacket/internal/models"
    "heroPacket/internal/pcap"
    "strconv"
)

templ AnalysisStatus(job *models.AnalysisJob) {
    <div id="analysis-status" 
         class="analysis-status"
         hx-get={"/status/" + job.ID}
         hx-trigger="every 2s until job.Status == 'completed' || job.Status == 'error'">
        <div class="status-card">
            <h3>Analysis Status: {job.Status}</h3>
            if job.Status == "processing" {
                <div class="progress">
                    <p>Processed {job.TotalPackets} packets...</p>
                    <div class="spinner"></div>
                </div>
            } else if job.Status == "error" {
                <div class="error-message">
                    <p>Error: {job.ErrorMessage}</p>
                </div>
            } else if job.Status == "completed" {
                <div class="completed"
                     hx-get={"/results/" + job.ID}
                     hx-trigger="load"
                     hx-target="#analysis-results">
                    <p>Analysis complete! Loading results...</p>
                </div>
            }
        </div>
    </div>
}

templ AnalysisResults(job *models.AnalysisJob) {
    <div id="analysis-results" class="analysis-results">
        <div class="results-header">
            <h2>Analysis Results</h2>
            <p>File: {job.Filename}</p>
            <p>Total Packets: {job.TotalPackets}</p>
            <p>Duration: {job.EndTime.Sub(job.StartTime).String()}</p>
        </div>
        
        <div class="results-grid">
            <!-- Packet Statistics -->
            <div class="stat-card">
                <h3>Packet Length Distribution</h3>
                for length, count := range pcap.GetPacketStats().LengthStats {
                    <div class="stat-row">
                        <span>â‰¤ {length} bytes:</span>
                        <span>{count}</span>
                    </div>
                }
            </div>
            
            <!-- Protocol Statistics -->
            <div class="stat-card">
                <h3>Protocol Distribution</h3>
                <div class="protocol-stats">
                    <h4>Ethernet Types</h4>
                    for etherType, count := range pcap.GetPacketStats().EtherStats {
                        <div class="stat-row">
                            <span>{etherType}:</span>
                            <span>{count}</span>
                        </div>
                    }
                    
                    <h4>Transport Protocols</h4>
                    <div class="stat-row">
                        <span>TCP:</span>
                        <span>{pcap.GetPacketStats().TCPStats["count"]}</span>
                    </div>
                    <div class="stat-row">
                        <span>UDP:</span>
                        <span>{pcap.GetPacketStats().UDPStats["count"]}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
