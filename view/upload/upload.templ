package upload

import "fmt"

// ViewData holds data for the upload view
type ViewData struct {
	Filename string
}

// Show displays the upload result
templ Show(data ViewData) {
	<div class="mt-8 bg-white rounded shadow p-8">
		<div class="text-center mb-8">
			<h2 class="text-3xl font-bold text-gray-800 mb-4">Upload Successful</h2>
			<p class="text-lg text-gray-600 mb-4">Your PCAP file has been uploaded successfully.</p>
			
			<div class="mt-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
				<p>File <strong>{ data.Filename }</strong> has been uploaded and is ready for analysis.</p>
			</div>
		</div>
		
		<div class="mt-8 text-center">
			<a 
				href="/home"
				class="bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 mx-auto"
			>
				Return to Home
			</a>
		</div>
	</div>
}

templ nav() {
	<nav class="bg-gray-800 p-4">
		<div class="container mx-auto flex justify-between items-center">
			<a href="/" class="text-white hover:text-teal-300 text-xl font-bold">HeroPacket</a>
			<div class="space-x-4">
				<a href="/" class="text-gray-300 hover:text-white">Home</a>
				<a href="/upload" class="text-gray-300 hover:text-white">Upload</a>
			</div>
		</div>
	</nav>
}

// Helper function for conditional class based on index
func condClass(i int) string {
	if i%2 == 0 {
		return "bg-gray-800/50"
	}
	return "bg-gray-800/30"
}

// humanBytes converts bytes to human-readable format
func humanBytes(b uint64) string {
	const unit = 1024
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := uint64(unit), 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(b)/float64(div), "KMGTPE"[exp])
}
