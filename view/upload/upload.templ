package upload

import (
	"strconv"
	
	"github.com/yourusername/heroPacket/internal/analysis"
)

type ViewData struct {
	SessionID     string
	PacketCount   int
	TopProtocols  []analysis.ProtocolCount
	TrafficStats  *analysis.TrafficStats
	Conversations []*analysis.Conversation
	Error         string
}

templ Show(data ViewData) {
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>HeroPacket - Analysis</title>
		<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
		<script src="https://unpkg.com/htmx.org@1.9.4"></script>
	</head>
	<body class="bg-gradient-to-r from-gray-800 to-gray-900 min-h-screen p-6">
		<div class="container mx-auto max-w-6xl">
			<header class="text-center mb-10">
				<h1 class="text-5xl font-extrabold text-teal-400 mb-2">HeroPacket</h1>
				<p class="text-lg text-gray-300">Upload and analyze your network traffic</p>
			</header>
			
			if data.Error != "" {
				<div class="bg-red-900 border border-red-700 text-red-200 px-4 py-3 rounded-lg mb-6">
					{ data.Error }
				</div>
			}

			<div class="bg-gray-700 shadow-xl rounded-xl p-8 border border-gray-600 mb-8">
				<h2 class="text-2xl font-bold text-teal-400 mb-4">Upload PCAP File</h2>
				<form hx-post="/upload" hx-encoding="multipart/form-data">
					<div class="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
						<input 
							type="file" 
							name="pcap-file" 
							accept=".pcap,.pcapng" 
							class="bg-gray-800 text-gray-200 px-4 py-2 rounded-lg border border-gray-600 focus:outline-none focus:ring-2 focus:ring-teal-400"
						/>
						<button 
							type="submit" 
							class="bg-teal-500 text-white px-6 py-2 rounded-lg hover:bg-teal-600 focus:outline-none focus:ring-2 focus:ring-teal-400"
						>
							Analyze PCAP
						</button>
					</div>
				</form>
			</div>

			if data.SessionID != "" {
				<div class="analysis-results space-y-6">
					<!-- Summary Section -->
					<div class="bg-gray-700 shadow-xl rounded-xl p-6 border border-gray-600">
						<h2 class="text-2xl font-bold text-teal-400 mb-4">Analysis Summary</h2>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
							<div class="bg-gray-800 rounded-lg p-4 border border-gray-600">
								<div class="text-gray-400 mb-1">Total Packets</div>
								<div class="text-3xl font-bold text-teal-300">{ strconv.Itoa(data.PacketCount) }</div>
							</div>
							
							<div class="bg-gray-800 rounded-lg p-4 border border-gray-600">
								<div class="text-gray-400 mb-1">Total Bytes</div>
								<div class="text-3xl font-bold text-teal-300">{ data.TrafficStats.TotalBytes }</div>
							</div>
						</div>
					</div>

					<!-- Protocol Distribution -->
					<div class="bg-gray-700 shadow-xl rounded-xl p-6 border border-gray-600">
						<h2 class="text-2xl font-bold text-teal-400 mb-4">Protocol Distribution</h2>
						<div 
							hx-get={ "/analysis/protocol-chart/" + data.SessionID } 
							hx-trigger="load" 
							class="w-full h-64 bg-gray-800 rounded-lg p-4 mb-4 flex items-center justify-center"
						>
							<div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-teal-400"></div>
						</div>
						
						<div class="overflow-x-auto">
							<table class="w-full text-left">
								<thead>
									<tr class="bg-gray-800">
										<th class="px-4 py-2 rounded-tl-lg">Protocol</th>
										<th class="px-4 py-2 rounded-tr-lg">Count</th>
									</tr>
								</thead>
								<tbody>
									for i, proto := range data.TopProtocols {
										if i % 2 == 0 {
											<tr class="bg-gray-800 bg-opacity-50">
												<td class="px-4 py-2 border-t border-gray-700">{ proto.Name }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ strconv.Itoa(proto.Count) }</td>
											</tr>
										} else {
											<tr class="bg-gray-800 bg-opacity-30">
												<td class="px-4 py-2 border-t border-gray-700">{ proto.Name }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ strconv.Itoa(proto.Count) }</td>
											</tr>
										}
									}
								</tbody>
							</table>
						</div>
					</div>

					<!-- Conversations -->
					<div class="bg-gray-700 shadow-xl rounded-xl p-6 border border-gray-600">
						<h2 class="text-2xl font-bold text-teal-400 mb-4">Top Conversations</h2>
						<div class="overflow-x-auto">
							<table class="w-full text-left">
								<thead>
									<tr class="bg-gray-800">
										<th class="px-4 py-2 rounded-tl-lg">Source</th>
										<th class="px-4 py-2">Destination</th>
										<th class="px-4 py-2">Protocol</th>
										<th class="px-4 py-2">Packets</th>
										<th class="px-4 py-2 rounded-tr-lg">Bytes</th>
									</tr>
								</thead>
								<tbody>
									for i, conv := range data.Conversations {
										if i % 2 == 0 {
											<tr class="bg-gray-800 bg-opacity-50">
												<td class="px-4 py-2 border-t border-gray-700">{ conv.SourceIP }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ conv.DestIP }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ conv.Protocol }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ strconv.Itoa(conv.PacketCount) }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ strconv.FormatInt(conv.TotalBytes, 10) }</td>
											</tr>
										} else {
											<tr class="bg-gray-800 bg-opacity-30">
												<td class="px-4 py-2 border-t border-gray-700">{ conv.SourceIP }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ conv.DestIP }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ conv.Protocol }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ strconv.Itoa(conv.PacketCount) }</td>
												<td class="px-4 py-2 border-t border-gray-700">{ strconv.FormatInt(conv.TotalBytes, 10) }</td>
											</tr>
										}
									}
								</tbody>
							</table>
						</div>
					</div>

					<!-- Traffic Timeline -->
					<div class="bg-gray-700 shadow-xl rounded-xl p-6 border border-gray-600">
						<h2 class="text-2xl font-bold text-teal-400 mb-4">Traffic Timeline</h2>
						<div 
							hx-get={ "/analysis/traffic-timeline/" + data.SessionID } 
							hx-trigger="load" 
							class="w-full h-64 bg-gray-800 rounded-lg p-4 flex items-center justify-center"
						>
							<div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-teal-400"></div>
						</div>
					</div>
				</div>
			}
			
			<footer class="mt-10 text-center text-gray-400 text-sm">
				<a href="/" class="text-teal-400 hover:text-teal-300">‚Üê Back to Home</a>
				<p class="mt-2">HeroPacket - Network Traffic Analysis Tool</p>
			</footer>
		</div>
	</body>
}
