// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package home

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"time"
)

// Add this type at the top of the file
type UploadedFile struct {
	Name       string
	Size       int64
	UploadTime time.Time
}

// Landing page template (no CSRF needed)
func Show() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>HeroPacket</title><link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\"></head><body class=\"bg-gray-50 min-h-screen flex flex-col items-center justify-center text-gray-900\"><div class=\"bg-white shadow-xl rounded-xl p-10 w-full max-w-2xl border border-indigo-100 text-center\"><h1 class=\"text-5xl font-bold text-indigo-700 mb-6\">Pcap Analyzer</h1><p class=\"text-lg text-gray-700 mb-8\">Welcome to Pcap Analyzer, a lightweight packet capture analysis system.</p><a href=\"/home\" class=\"bg-indigo-600 text-white px-8 py-3 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors\">Get Started</a></div></body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Dashboard template (with CSRF and file upload)
func ShowHome(csrfToken string, files []UploadedFile) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>HeroPacket</title><link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\"></head><body class=\"bg-gray-100 min-h-screen text-gray-800\"><!-- Top Navigation Bar --><nav class=\"bg-indigo-700 border-b border-indigo-800 px-4 py-3 shadow-sm\"><div class=\"container mx-auto flex justify-between items-center\"><div class=\"flex items-center\"><h1 class=\"text-2xl font-bold text-white\">Pcap Analyzer</h1></div><div class=\"flex items-center space-x-4\"><!-- Documentation Button --><a href=\"/documentation\" class=\"bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors flex items-center\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path></svg> Documentation</a></div></div></nav><div class=\"container mx-auto\"><div class=\"mt-8 bg-white rounded shadow p-8\"><!-- Main content area with welcome message --><div class=\"text-center mb-8\"><h2 class=\"text-3xl font-bold text-gray-800 mb-4\">HeroPacket</h2><p class=\"text-lg text-gray-600 mb-4\">Welcome to HeroPacket .......</p><div class=\"flex justify-center\"><div class=\"max-w-lg w-full\"></div></div></div><!-- File upload area --><div class=\"mt-8 border border-gray-300 rounded-lg p-6 text-center\"><div class=\"mb-4\"><div id=\"uploadDisplay\" class=\"flex items-center justify-center\"><div class=\"p-4\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-12 w-12 text-gray-400 mx-auto mb-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path></svg><p class=\"text-gray-600 text-sm mb-2\">PCAP Files</p></div></div></div><!-- Form for file upload with HTMX --><form id=\"uploadForm\" hx-post=\"/upload\" hx-encoding=\"multipart/form-data\" enctype=\"multipart/form-data\" hx-target=\"#uploadResponse\" hx-indicator=\"#uploadingIndicator\" hx-swap=\"outerHTML\"><input type=\"file\" id=\"fileInput\" name=\"pcap-file\" accept=\".pcap,.pcapng,.cap\" onchange=\"updateFileName()\" class=\"hidden\"> <input type=\"hidden\" name=\"_csrf\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(csrfToken)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/home/home.templ`, Line: 109, Col: 60}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"><!-- Button to trigger file input --><button type=\"button\" onclick=\"document.getElementById(&#39;fileInput&#39;).click()\" class=\"bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 mx-auto\">Upload</button><!-- Submit button that will be clicked by JavaScript --><button type=\"submit\" id=\"submitButton\" class=\"hidden\">Submit</button><!-- Loading indicator --><div id=\"uploadingIndicator\" class=\"htmx-indicator mt-4\"><div class=\"flex justify-center items-center\"><svg class=\"animate-spin h-5 w-5 text-blue-500 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle> <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg> <span>Uploading...</span></div></div></form><!-- Response container --><div id=\"uploadResponse\" class=\"mt-4 text-center\"></div></div><!-- Previous uploads table -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(files) > 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"mt-8 bg-white rounded shadow p-8\"><h3 class=\"text-xl font-semibold mb-4\">Previous Uploads</h3><div class=\"overflow-x-auto\"><table class=\"w-full text-left\"><thead class=\"bg-gray-100\"><tr><th class=\"px-6 py-3 rounded-l-lg\">Filename</th><th class=\"px-6 py-3\">Upload Date</th><th class=\"px-6 py-3\">Size</th><th class=\"px-6 py-3 rounded-r-lg\">Actions</th></tr></thead> <tbody class=\"divide-y divide-gray-200\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, file := range files {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<tr class=\"hover:bg-gray-50 transition-colors\"><td class=\"px-6 py-4\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(file.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/home/home.templ`, Line: 159, Col: 53}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</td><td class=\"px-6 py-4\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(file.UploadTime.Format("2006-01-02 15:04:05"))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/home/home.templ`, Line: 160, Col: 89}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</td><td class=\"px-6 py-4\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(formatFileSize(file.Size))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/home/home.templ`, Line: 161, Col: 69}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</td><td class=\"px-6 py-4\"><button data-analyze-button data-filename=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(file.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `view/home/home.templ`, Line: 165, Col: 49}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\" class=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors\">Analyze</button></td></tr>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</tbody></table></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</div></div><!-- Footer --><footer class=\"mt-auto py-6 text-center text-gray-500 text-sm\">heroPacket 2025</footer><!-- Scripts --><script>\n    function updateFileName() {\n      const fileInput = document.getElementById('fileInput');\n      const uploadDisplay = document.getElementById('uploadDisplay');\n      const submitButton = document.getElementById('submitButton');\n      \n      if (fileInput.files.length > 0) {\n        const fileName = fileInput.files[0].name;\n        uploadDisplay.innerHTML = `\n          <div class=\"p-4\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-12 w-12 text-blue-500 mx-auto mb-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"/>\n            </svg>\n            <p class=\"text-gray-800 text-sm mb-2\">${fileName}</p>\n          </div>\n        `;\n        \n        // Trigger the form submission via HTMX\n        submitButton.click();\n      }\n    }\n\n    // Function to refresh the page after successful upload\n    function refreshAfterUpload() {\n      // Wait a moment to show the success message before refreshing\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    }\n\n    // Enable analyze buttons\n    function setupAnalyzeButtons() {\n      document.querySelectorAll('[data-analyze-button]').forEach(button => {\n        button.addEventListener('click', function() {\n          const fileName = this.getAttribute('data-filename');\n          window.location.href = `/analyze/${fileName}`;\n        });\n      });\n    }\n\n    // Run setup when page loads\n    document.addEventListener('DOMContentLoaded', setupAnalyzeButtons);\n  </script></body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Helper function
func formatFileSize(size int64) string {
	const unit = 1024
	if size < unit {
		return fmt.Sprintf("%d B", size)
	}
	div, exp := int64(unit), 0
	for n := size / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(size)/float64(div), "KMGTPE"[exp])
}

var _ = templruntime.GeneratedTemplate
