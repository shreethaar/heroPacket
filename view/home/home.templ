package home

import (
	"fmt"
	"time"
)

// Add this type at the top of the file
type UploadedFile struct {
	Name       string
	Size       int64
	UploadTime time.Time
}

// Landing page template (no CSRF needed)
templ Show() {
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HeroPacket</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50 min-h-screen flex flex-col items-center justify-center text-gray-900">
  <div class="bg-white shadow-xl rounded-xl p-10 w-full max-w-2xl border border-indigo-100 text-center">
    <h1 class="text-5xl font-bold text-indigo-700 mb-6">Pcap Analyzer</h1>
    <p class="text-lg text-gray-700 mb-8">Welcome to Pcap Analyzer, a lightweight packet capture analysis system.</p>
    <a 
      href="/home"
      class="bg-indigo-600 text-white px-8 py-3 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors"
    >
      Get Started
    </a>
  </div>
</body>
}

// Dashboard template (with CSRF and file upload)
templ ShowHome(csrfToken string, files []UploadedFile) {
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HeroPacket</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 min-h-screen text-gray-800">
  <!-- Top Navigation Bar -->
  <nav class="bg-indigo-700 border-b border-indigo-800 px-4 py-3 shadow-sm">
  <div class="container mx-auto flex justify-between items-center">
    <div class="flex items-center">
      <h1 class="text-2xl font-bold text-white">Pcap Analyzer</h1>
    </div>
    <div class="flex items-center space-x-4">
      <!-- Documentation Button -->
      <a 
        href="/documentation"
        class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors flex items-center"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
        Documentation
      </a>
    </div>
  </div>
</nav>
  <div class="container mx-auto">
    <div class="mt-8 bg-white rounded shadow p-8">
      <!-- Main content area with welcome message -->
      <div class="text-center mb-8">
        <h2 class="text-3xl font-bold text-gray-800 mb-4">HeroPacket</h2>
        <p class="text-lg text-gray-600 mb-4">Welcome to HeroPacket .......</p>
        <div class="flex justify-center">
          <div class="max-w-lg w-full">
          </div>
        </div>
      </div>

      <!-- File upload area -->
      <div class="mt-8 border border-gray-300 rounded-lg p-6 text-center">
        <div class="mb-4">
          <div id="uploadDisplay" class="flex items-center justify-center">
            <div class="p-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
              <p class="text-gray-600 text-sm mb-2">PCAP Files</p>
            </div>
          </div>
        </div>
        
        <button 
          onclick="document.getElementById('fileInput').click()"
          class="bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 mx-auto"
        >
        Upload
        </button>
      </div>

      <!-- Form for file upload -->
      <form id="uploadForm" 
          hx-post="/upload" 
          hx-encoding="multipart/form-data" 
          enctype="multipart/form-data"
          method="POST"
          class="hidden">
        <input 
          type="file" 
          id="fileInput" 
          name="pcap-file" 
          accept=".pcap,.pcapng,.cap"
          onchange="updateFileName(); document.getElementById('uploadForm').submit()"
        />
        <input type="hidden" name="_csrf" value={csrfToken}/>
      </form>
    </div>

    <!-- Previous uploads table -->
    if len(files) > 0 {
      <div class="mt-8 bg-white rounded shadow p-8">
        <h3 class="text-xl font-semibold mb-4">Previous Uploads</h3>
        <div class="overflow-x-auto">
          <table class="w-full text-left">
            <thead class="bg-gray-100">
              <tr>
                <th class="px-6 py-3 rounded-l-lg">Filename</th>
                <th class="px-6 py-3">Upload Date</th>
                <th class="px-6 py-3">Size</th>
                <th class="px-6 py-3 rounded-r-lg">Actions</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
              for _, file := range files {
                <tr class="hover:bg-gray-50 transition-colors">
                  <td class="px-6 py-4">{ file.Name }</td>
                  <td class="px-6 py-4">{ file.UploadTime.Format("2006-01-02 15:04:05") }</td>
                  <td class="px-6 py-4">{ formatFileSize(file.Size) }</td>
                  <td class="px-6 py-4">
                    <button 
                      data-analyze-button
                      data-filename={ file.Name }
                      class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
                    >
                    Analyze
                    </button>
                  </td>
                </tr>
              }
            </tbody>
          </table>
        </div>
      </div>
    }
  </div>

  <!-- Footer -->
  <footer class="mt-auto py-6 text-center text-gray-500 text-sm">
    heroPacket 2025
  </footer>

  <!-- Scripts -->
  <script>
    function updateFileName() {
      const fileInput = document.getElementById('fileInput');
      const uploadDisplay = document.getElementById('uploadDisplay');
      
      if (fileInput.files.length > 0) {
        const fileName = fileInput.files[0].name;
        uploadDisplay.innerHTML = `
          <div class="p-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-blue-500 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            <p class="text-gray-800 text-sm mb-2">${fileName}</p>
          </div>
        `;
      }
    }

    // Enable analyze buttons
    function setupAnalyzeButtons() {
      document.querySelectorAll('[data-analyze-button]').forEach(button => {
        button.addEventListener('click', function() {
          const fileName = this.getAttribute('data-filename');
          window.location.href = `/analyze/${fileName}`;
        });
      });
    }

    // Run setup when page loads
    document.addEventListener('DOMContentLoaded', setupAnalyzeButtons);
  </script>
</body>
}

// Helper function
func formatFileSize(size int64) string {
	const unit = 1024
	if size < unit {
		return fmt.Sprintf("%d B", size)
	}
	div, exp := int64(unit), 0
	for n := size / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(size)/float64(div), "KMGTPE"[exp])
}
