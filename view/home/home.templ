package home

import (
	"fmt"
	"time"
)

type UploadedFile struct {
	Name       string
	Size       int64
	UploadTime time.Time
}

type UploadResponse struct {
	Status  string
	Message string
}

templ Show() {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>HeroPacket</title>
		<script src="https://unpkg.com/htmx.org@1.9.5"></script>
		<script src="https://cdn.tailwindcss.com"></script>
	</head>
	<body class="bg-gray-800">
		@ShowHome(nil, nil)
	</body>
}

templ ShowHome(files []UploadedFile, response *UploadResponse) {
	<div class="min-h-screen bg-gray-800 text-gray-100 py-8">
		<div class="container mx-auto px-4">
			<h1 class="text-4xl font-bold text-center mb-8">HeroPacket</h1>
			<div class="max-w-2xl mx-auto">
				<div class="bg-gray-700 rounded-xl p-6 border-2 border-gray-600">
					<h2 class="text-2xl font-semibold mb-4">Upload PCAP File</h2>
					<form 
						hx-post="/upload" 
						hx-encoding="multipart/form-data" 
						hx-target="#uploadResponse"
						hx-swap="outerHTML"
						hx-trigger="submit"
						class="space-y-4"
					>
						<div class="flex items-center justify-center w-full">
							<label class="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-500 border-dashed rounded-lg cursor-pointer bg-gray-600 hover:bg-gray-500 transition-colors">
								<div class="flex flex-col items-center justify-center pt-5 pb-6">
									<svg class="w-8 h-8 mb-4 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
										<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
									</svg>
									<p class="mb-2 text-sm text-gray-400">
										<span class="font-semibold">Click to upload</span> or drag and drop
									</p>
									<p class="text-xs text-gray-400">PCAP files only (max 100MB)</p>
								</div>
								<input 
									id="pcap-file" 
									name="file" 
									type="file" 
									accept=".pcap,.pcapng" 
									class="hidden" 
								/>
							</label>
						</div>
						<button type="submit" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold transition-colors">
							Upload
						</button>
					</form>
				</div>

				<div id="uploadResponse" class="mt-4 text-center">
					if response != nil {
						if response.Status == "error" {
							<div class="text-red-500 bg-red-100/10 p-3 rounded-lg font-bold">
								{ response.Message }
							</div>
						} else if response.Status == "success" {
							<div class="text-green-500 bg-green-100/10 p-3 rounded-lg font-bold">
								{ response.Message }
							</div>
						}
					}
				</div>

				<div id="fileListContainer" class="mt-8 bg-gray-700 rounded-xl p-6 border-2 border-gray-600"
					hx-get="/refresh-files"
					hx-trigger="fileListUpdate from:body"
				>
					if files != nil {
						@DetailedFileListTemplate(files)
					} else {
						<div class="text-center text-gray-400">
							<p>No files uploaded yet</p>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}

templ DetailedFileListTemplate(files []UploadedFile) {
	if len(files) > 0 {
		<h2 class="text-2xl font-semibold mb-4">Uploaded Files</h2>
		<div class="space-y-2">
			for _, file := range files {
				<div class="flex items-center justify-between p-3 bg-gray-600 rounded-lg">
					<div class="flex flex-col">
						<span class="font-medium">{ file.Name }</span>
						<span class="text-sm text-gray-400">{ formatFileSize(file.Size) } â€¢ { file.UploadTime.Format("Jan 02, 2006 15:04:05") }</span>
					</div>
					<div class="flex space-x-2">
						<a href={ templ.SafeURL(fmt.Sprintf("/analytics/%s", file.Name)) } class="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-sm font-medium transition-colors">
							Analyze
						</a>
					</div>
				</div>
			}
		</div>
	} else {
		<div class="text-center text-gray-400">
			<p>No files uploaded yet</p>
		</div>
	}
}

// Helper function to format file sizes
func formatFileSize(size int64) string {
	const unit = 1024
	if size < unit {
		return fmt.Sprintf("%d B", size)
	}
	div, exp := int64(unit), 0
	for n := size / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(size)/float64(div), "KMGTPE"[exp])
}
