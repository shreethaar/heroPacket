package overview

import (
    "fmt"
    "time"
    "heroPacket/internal/analysis"
)

type ViewData struct {
    Filename      string
    TrafficStats  *analysis.TrafficStats
    TopProtocols  []analysis.ProtocolCount
    Conversations []*analysis.Conversation
    NetworkNodes  []*analysis.NetworkNode
    DNSQueries    []analysis.QueryCount
}

// Helper function for formatting bytes
func formatBytes(bytes int) string {
    const unit = 1024
    if bytes < unit {
        return fmt.Sprintf("%d B", bytes)
    }
    div, exp := int64(unit), 0
    for n := int64(bytes) / unit; n >= unit; n /= unit {
        div *= unit
        exp++
    }
    return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

// Helper function for formatting duration
func formatDuration(d time.Duration) string {
    seconds := int(d.Seconds())
    hours := seconds / 3600
    seconds = seconds % 3600
    minutes := seconds / 60
    seconds = seconds % 60

    if hours > 0 {
        return fmt.Sprintf("%dh %dm %ds", hours, minutes, seconds)
    } else if minutes > 0 {
        return fmt.Sprintf("%dm %ds", minutes, seconds)
    }
    return fmt.Sprintf("%ds", seconds)
}

templ Show(data ViewData) {
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HeroPacket - Overview</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gradient-to-r from-gray-800 to-gray-900 min-h-screen text-white">
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold text-teal-400">PCAP Overview: { data.Filename }</h1>
            <div class="space-x-4">
                <a href="/analytics/{ data.Filename }" class="bg-teal-500 text-white px-4 py-2 rounded-lg hover:bg-teal-600 transition-colors">
                    Detailed Analytics
                </a>
            </div>
        </div>
        
        <!-- Quick Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-gray-700 rounded-xl p-6 border border-gray-600">
                <h3 class="text-gray-400 text-sm mb-2">Total Packets</h3>
                <p class="text-2xl font-bold text-white">{ fmt.Sprint(data.TrafficStats.TotalPackets) }</p>
            </div>
            <div class="bg-gray-700 rounded-xl p-6 border border-gray-600">
                <h3 class="text-gray-400 text-sm mb-2">Total Traffic</h3>
                <p class="text-2xl font-bold text-white">{ formatBytes(data.TrafficStats.TotalBytes) }</p>
            </div>
            <div class="bg-gray-700 rounded-xl p-6 border border-gray-600">
                <h3 class="text-gray-400 text-sm mb-2">Duration</h3>
                <p class="text-2xl font-bold text-white">
                    { formatDuration(data.TrafficStats.EndTime.Sub(data.TrafficStats.StartTime)) }
                </p>
            </div>
            <div class="bg-gray-700 rounded-xl p-6 border border-gray-600">
                <h3 class="text-gray-400 text-sm mb-2">Avg. Packet Size</h3>
                <p class="text-2xl font-bold text-white">
                    { formatBytes(data.TrafficStats.TotalBytes / data.TrafficStats.TotalPackets) }
                </p>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Protocol Distribution -->
            <div class="bg-gray-700 rounded-xl p-6 border border-gray-600">
                <h2 class="text-xl font-semibold text-teal-400 mb-6">Top Protocols</h2>
                <div class="space-y-4">
                    for _, proto := range data.TopProtocols {
                        <div class="flex items-center">
                            <span class="w-24 text-gray-300">{ proto.Name }</span>
                            <div class="flex-1 mx-4 bg-gray-600 rounded-full h-4">
                                <div 
                                    class="bg-teal-500 h-4 rounded-full" 
                                    style={ fmt.Sprintf("width: %.1f%%", (float64(proto.Count) / float64(data.TrafficStats.TotalPackets)) * 100) }
                                ></div>
                            </div>
                            <span class="w-32 text-right">
                                { fmt.Sprintf("%d (%.1f%%)", 
                                    proto.Count, 
                                    (float64(proto.Count) / float64(data.TrafficStats.TotalPackets)) * 100) }
                            </span>
                        </div>
                    }
                </div>
            </div>

            <!-- Packet Size Distribution -->
            <div class="bg-gray-700 rounded-xl p-6 border border-gray-600">
                <h2 class="text-xl font-semibold text-teal-400 mb-6">Packet Size Distribution</h2>
                <div class="space-y-4">
                    for bucket, count := range data.TrafficStats.SizeBuckets {
                        <div class="flex items-center">
                            <span class="w-24 text-gray-300">{ bucket }</span>
                            <div class="flex-1 mx-4 bg-gray-600 rounded-full h-4">
                                <div 
                                    class="bg-teal-500 h-4 rounded-full" 
                                    style={ fmt.Sprintf("width: %.1f%%", (float64(count) / float64(data.TrafficStats.TotalPackets)) * 100) }
                                ></div>
                            </div>
                            <span class="w-32 text-right">
                                { fmt.Sprintf("%d (%.1f%%)", 
                                    count, 
                                    (float64(count) / float64(data.TrafficStats.TotalPackets)) * 100) }
                            </span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Network Map Section -->
        <div class="bg-gray-700 rounded-xl p-6 border border-gray-600 mb-8">
            <h2 class="text-xl font-semibold text-teal-400 mb-6">Network Map</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <!-- Active Nodes -->
                <div>
                    <h3 class="text-lg font-semibold text-white mb-4">Active Nodes</h3>
                    <div class="space-y-4">
                        for _, node := range data.NetworkNodes {
                            <div class="bg-gray-800/50 rounded-lg p-4">
                                <div class="flex items-center justify-between mb-2">
                                    <span class="text-teal-400">{ node.IP }</span>
                                    <span class={templ.Classes(
                                        "px-2 py-1 text-sm rounded-full",
                                        templ.KV("bg-purple-500/20 text-purple-300", node.Type == "server"),
                                        templ.KV("bg-blue-500/20 text-blue-300", node.Type != "server")
                                    )}>
                                        { node.Type }
                                    </span>
                                </div>
                                <div class="text-sm text-gray-400">
                                    <div class="mb-1">Active Services:</div>
                                    <div class="flex flex-wrap gap-2">
                                        for service := range node.Services {
                                            <span class="px-2 py-1 bg-gray-700 rounded-full text-xs">
                                                { service }
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- DNS Activity -->
                <div>
                    <h3 class="text-lg font-semibold text-white mb-4">Top DNS Queries</h3>
                    <div class="space-y-2">
                        for _, query := range data.DNSQueries {
                            <div class="flex items-center justify-between py-2 border-b border-gray-600">
                                <span class="text-gray-300 truncate">{ query.Domain }</span>
                                <span class="text-teal-400">{ fmt.Sprint(query.Count) }</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Top Conversations -->
        <div class="bg-gray-700 rounded-xl p-6 border border-gray-600">
            <h2 class="text-xl font-semibold text-teal-400 mb-6">Top Conversations</h2>
            <div class="overflow-x-auto">
                <table class="w-full text-left">
                    <thead>
                        <tr class="bg-gray-800/50">
                            <th class="px-6 py-3">Source IP</th>
                            <th class="px-6 py-3">Destination IP</th>
                            <th class="px-6 py-3">Protocol</th>
                            <th class="px-6 py-3">Packets</th>
                            <th class="px-6 py-3">Total Traffic</th>
                            <th class="px-6 py-3">Services</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-600">
                        for _, conv := range data.Conversations {
                            <tr class="hover:bg-gray-600/50">
                                <td class="px-6 py-4">{ conv.SourceIP }</td>
                                <td class="px-6 py-4">{ conv.DestIP }</td>
                                <td class="px-6 py-4">{ conv.Protocol }</td>
                                <td class="px-6 py-4">{ fmt.Sprint(conv.PacketCount) }</td>
                                <td class="px-6 py-4">{ formatBytes(conv.TotalBytes) }</td>
                                <td class="px-6 py-4">
                                    <div class="flex flex-wrap gap-2">
                                        for _, node := range data.NetworkNodes {
                                            if node.IP == conv.DestIP {
                                                for service := range node.Services {
                                                    <span class="px-2 py-1 bg-gray-700 rounded-full text-xs text-teal-400">
                                                        { service }
                                                    </span>
                                                }
                                            }
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</body>
} 